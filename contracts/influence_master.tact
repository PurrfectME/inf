import "@stdlib/ownable";
import "@stdlib/deploy";
import "./messages";
message Mint {
    amount: Int;
    receiver: Address;
}

contract FundContract {
    const minTonsForStorage: Int = ton("0.01");
    const gasConsumption: Int = ton("0.01");
    fund_name: String;
    description: String;
    balance: Int;
    image: String;
    owner: Address;
    init(fund_name: String, description: String, owner: Address){
        self.fund_name = fund_name;
        self.description = description;
        self.balance = 0;
        self.image = "ASD";
        self.owner = owner;
    }

    receive("new"){
        self.balance = 10;
    }

    get fun ownerFund(): Address {
        return self.owner;
    }

    get fun bebe(): Fund {
        let res: Fund = Fund{
            balance: myBalance(),
            description: self.description,
            name: self.fund_name,
            jetton_balance: self.balance,
            image: self.image,
            owner: self.owner
        };
        return res;
    }
}

contract InfluenceMaster with Jetton {
    totalSupply: Int as coins;
    owner: Address;
    content: Cell;
    mintable: Bool;
    maxSupply: Int as coins; // Extract parameter we set here. The Jetton Standards doesn't have this parameter.

    init(content: Cell, maxSupply: Int){
        self.totalSupply = ton("5000");
        self.owner = sender();
        self.mintable = true;
        self.content = content;
        self.maxSupply = maxSupply;
    }

    receive(msg: Mint){
        let ctx: Context = context();
        require(ctx.sender == self.owner, "Not Owner");
        require(self.mintable, "Can't Mint Anymore");
        self.mint(msg.receiver, msg.amount, self.owner); // (to, amount, response_destination)
    }

    receive("Mint: 100"){
        // Public Minting
        let ctx: Context = context();
        require(self.mintable, "Can't Mint Anymore");
        self.mint(ctx.sender, 100, self.owner); // üî¥
    }

    receive("Owner: MintClose"){
        let ctx: Context = context();
        require(ctx.sender == self.owner, "Not Owner");
        self.mintable = false;
    }

    receive("buy"){
        let ctx: Context = context();
        //–í–û–¢ –≠–¢–ê –°–¢–†–û–ß–ö–ê –°–î–ï–õ–ê–ù–ê –ß–¢–û–ë–´ –ù–ê –ú–ê–°–¢–ï–† –í–û–õ–ï–¢–ï –ë–´–õ –ë–ê–õ–ê–ù–° –ß–¢–û–ë–´ –°–õ–ê–¢–¨ —Ç—Ä–∞–Ω–∑—ã –Ω–∞ –º–∏–Ω—Ç(–∫–æ—Å—Ç—ã–ª—å –ø–∏–∑–¥–µ—Ü)
        //—Ç–æ –µ—Å—Ç—å —Å–Ω–∞—á–∞–ª–∞ –º—ã –∑–∞–∫–∏–¥—ã–≤–∞–µ–º –Ω–∞ –Ω–∞—à –º–∞—Å—Ç–µ—Ä –≤–æ–ª–µ—Ç –¥–µ–Ω–µ–≥ –∞ –ø–æ—Ç–æ–º —É–∂–µ —Ä–µ–∫–≤–µ—Å—Ç –Ω–∞ –º–∏–Ω—Ç —Ç–æ–∫–µ–Ω–æ–≤
        //—ç—Ç–æ –ø–æ—Ç–æ–º –ø—Ä–æ—Å—Ç–æ –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–∏—Å–∏–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–µ—Å—å –¥–µ–ª–∞—Ç—å
        if (myBalance() == 0) {
            send(SendParameters{to: myAddress(), value: 0, bounce: true, mode: SendRemainingValue + SendIgnoreErrors});
        } else {
            //–ø–æ–¥–µ–ª–∏–ª–∏ –Ω–∞ 2 —á—Ç–æ–±—ã —Ö–æ—Ç—å –∫–∞–∫-—Ç–æ —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –ø—Ä–∏–¥—É—Ç
            //TODO: FIX HERE
            self.mint(ctx.sender, ctx.value / 2, self.owner);
            send(SendParameters{to: myAddress(), value: 0, bounce: true, mode: SendRemainingValue + SendIgnoreErrors});
        }
    }

    receive("fund"){
        let ctx: Context = context();
        let fundInit: StateInit = initOf FundContract("cokea", "qwerty", ctx.sender);
        let fundAddress: Address = contractAddress(fundInit);
        send(SendParameters{
                to: fundAddress,
                value: 0,
                bounce: true,
                mode: SendRemainingValue + SendIgnoreErrors,
                body: "new".asComment(),
                data: fundInit.data,
                code: fundInit.code
            }
        );
    }
}
// ============================================================================================================ //
@interface("org.ton.jetton.master")
trait Jetton with Ownable, Deployable {
    totalSupply: Int; // Already set initially
    mintable: Bool;
    owner: Address;
    content: Cell;
    maxSupply: Int;
    const minTonsForStorage: Int = ton("0.01");
    const gasConsumption: Int = ton("0.01");

    receive(msg: TokenUpdateContent){
        self.requireOwner(); // Allow changing content only by owner
        self.content = msg.content; // Update content
    }

    receive(msg: TokenBurnNotification){
        self.requireSenderAsWalletOwner(msg.response_destination); // Check wallet
        self.totalSupply = self.totalSupply - msg.amount; // Update supply
        if (msg.response_destination != null) {
            // Cashback
            send(SendParameters{
                    to: msg.response_destination,
                    value: 0,
                    bounce: false,
                    mode: SendRemainingValue + SendIgnoreErrors,
                    body: TokenExcesses{queryId: msg.queryId}.toCell()
                }
            );
        }
    }

    // Private Methods //
    // @to The Address receive the Jetton token after minting
    // @amount The amount of Jetton token being minted
    // @response_destination The previous owner address
     fun mint(to: Address, amount: Int, response_destination: Address) {
        // require(self.totalSupply + amount <= self.maxSupply, "The total supply will be overlapping.");
        self.totalSupply = self.totalSupply + amount; // Update total supply

        let winit: StateInit = self.getJettonWalletInit(to); // Create message
        send(SendParameters{
                to: contractAddress(winit),
                //–û–õ–ï–ì –í–û–¢ –¢–£–¢ –ù–ê–î–û –ö–ê–ö_–¢–û –ü–û–î–£–ú–ê–¢–¨))) –∫–∞–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–∑—è—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Ç—Ä–∞–Ω–∑—ã —ç—Ç–æ–π
                value: self.msgValue(amount),
                bounce: true,
                mode: SendIgnoreErrors,
                body: TokenTransferInternal{
                    queryId: 0,
                    amount: amount,
                    from: myAddress(),
                    response_destination: response_destination,
                    forward_ton_amount: 0,
                    forward_payload: emptySlice()
                }.toCell(),
                code: winit.code,
                data: winit.data
            }
        );
    }

     fun msgValue(value: Int): Int {
        let msgValue: Int = value;
        let tonBalanceBeforeMsg: Int = myBalance() - msgValue;
        let storageFee: Int = self.minTonsForStorage - min(tonBalanceBeforeMsg, self.minTonsForStorage);
        msgValue = msgValue - storageFee + self.gasConsumption;
        return msgValue;
    }

     fun requireSenderAsWalletOwner(owner: Address) {
        let ctx: Context = context();
        let winit: StateInit = self.getJettonWalletInit(owner);
        require(contractAddress(winit) == ctx.sender, "Invalid sender");
    }

    virtual fun getJettonWalletInit(address: Address): StateInit {
        return initOf InfluenceWallet(myAddress(), address);
    }

    // ====== Get Methods ====== //

    get fun get_jetton_data(): JettonData {
        let code: Cell = self.getJettonWalletInit(myAddress()).code;
        return
            JettonData{
                totalSupply: self.totalSupply,
                mintable: self.mintable,
                owner: self.owner,
                content: self.content,
                walletCode: code
            };
    }

    get fun get_wallet_address(owner: Address): Address {
        let winit: StateInit = self.getJettonWalletInit(owner);
        return contractAddress(winit);
    }
}

// ============================================================ //
@interface("org.ton.jetton.wallet")
contract InfluenceWallet
{
    const minTonsForStorage: Int = ton("0.01");
    const gasConsumption: Int = ton("0.01");
    balance: Int;
    owner: Address;
    master: Address;
    init(master: Address, owner: Address){
        self.balance = 0;
        self.owner = owner;
        self.master = master;
    }

    receive(msg: TokenTransfer){
        // 0xf8a7ea5
        let ctx: Context = context(); // Check sender
        require(ctx.sender == self.owner, "Invalid sender");
        // Gas checks
        let fwdFee: Int = ctx.readForwardFee() + ctx.readForwardFee();
        let final: Int = 2 * self.gasConsumption + self.minTonsForStorage + fwdFee;
        require(ctx.value > min(final, ton("0.01")), "Invalid value!!");
        // Update balance
        self.balance = self.balance - msg.amount;
        require(self.balance >= 0, "Invalid balance");
        let init: StateInit = initOf InfluenceWallet(self.master, msg.destination);
        let walletAddress: Address = contractAddress(init);
        send(SendParameters{
                to: walletAddress,
                value: 0,
                mode: SendRemainingValue,
                bounce: true,
                body: TokenTransferInternal{
                    queryId: msg.queryId,
                    amount: msg.amount,
                    from: self.owner,
                    response_destination: msg.response_destination,
                    forward_ton_amount: msg.forward_ton_amount,
                    forward_payload: msg.forward_payload
                }.toCell(),
                code: init.code,
                data: init.data
            }
        );
    }

    receive(msg: TokenTransferInternal){
        // 0x178d4519
        let ctx: Context = context();
        if (ctx.sender != self.master) {
            let sinit: StateInit = initOf InfluenceWallet(self.master, msg.from);
            require(contractAddress(sinit) == ctx.sender, "Invalid sender!");
        }
        // Update balance
        self.balance = self.balance + msg.amount;
        require(self.balance >= 0, "Invalid balance");
        // Get value for gas
        let msgValue: Int = self.msgValue(ctx.value);
        let fwdFee: Int = ctx.readForwardFee();
        msgValue = msgValue - msg.forward_ton_amount - fwdFee;
        // 0x7362d09c - notify the new owner of JettonToken that the transfer is complete
        if (msg.forward_ton_amount > 0) {
            send(SendParameters{
                    to: self.owner,
                    value: msg.forward_ton_amount,
                    mode: SendPayGasSeparately + SendIgnoreErrors,
                    bounce: false,
                    body: TokenNotification{
                        queryId: msg.queryId,
                        amount: msg.amount,
                        from: msg.from,
                        forward_payload: msg.forward_payload
                    }.toCell()
                }
            );
        }
        // 0xd53276db -- Cashback to the original Sender
        if (msg.response_destination != null) {
            send(SendParameters{
                    to: msg.response_destination,
                    value: msgValue,
                    bounce: false,
                    body: TokenExcesses{queryId: msg.queryId}.toCell(),
                    mode: SendIgnoreErrors
                }
            );
        }
    }

    receive(msg: TokenBurn){
        let ctx: Context = context();
        require(ctx.sender == self.owner, "Invalid sender"); // Check sender

        self.balance = self.balance - msg.amount; // Update balance
        require(self.balance >= 0, "Invalid balance");
        let fwdFee: Int = ctx.readForwardFee(); // Gas checks
        require(ctx.value > fwdFee + 2 * self.gasConsumption + self.minTonsForStorage, "Invalid value - Burn");
        // Burn tokens
        send(SendParameters{
                to: self.master,
                value: 0,
                mode: SendRemainingValue,
                bounce: true,
                body: TokenBurnNotification{
                    queryId: msg.queryId,
                    amount: msg.amount,
                    response_destination: self.owner
                }.toCell()
            }
        );
    }

    get fun msgValue(value: Int): Int {
        let msgValue: Int = value;
        let tonBalanceBeforeMsg: Int = myBalance() - msgValue;
        let storageFee: Int = self.minTonsForStorage - min(tonBalanceBeforeMsg, self.minTonsForStorage);
        msgValue = msgValue - storageFee + self.gasConsumption;
        return msgValue;
    }

    // bounced(src: bounced<TokenTransferInternal>){
    //     self.balance = self.balance + src.amount;
    // }

    // bounced(src: bounced<TokenBurnNotification>){
    //     self.balance = self.balance + src.amount;
    // }

    get fun get_wallet_data(): JettonWalletData {
        return
            JettonWalletData{
                balance: self.balance,
                owner: self.owner,
                master: self.master,
                walletCode: initOf InfluenceWallet(self.master, self.owner).code
            };
    }

    // bounced(msg: Slice) {
    //     // Parse bounced message
    //     msg.skipBits(32); // 0xFFFFFFFF
    //     let op: Int = msg.loadUint(32);
    //     let queryId: Int = msg.loadUint(64);
    //     let jettonAmount: Int = msg.loadCoins();
    //     require(op == 0x178d4519 || op == 0x7bdd97de, "Invalid bounced message");
    //     self.balance = self.balance + jettonAmount; // Update balance
    // }
}